import telebot
from telebot import types
import os
from dotenv import load_dotenv
from processing import (
    extract_text_from_txt,
    extract_text_from_pdf,
    extract_text_from_docx,
    split_into_chunks,
    embed_chunks,
    #create_faiss_index,
    #find_relevant_chunks,
    generate_response,
    check_gpu_support
)

load_dotenv('token.env')
token = os.getenv("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(token=token)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
USE_LLM = False   # <-- –ø–µ—Ä–µ–∫–ª—é—á–∏ –Ω–∞ False —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å LLM

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
all_texts = []
saved_requests = []
text_chunks = []
faiss_index = None
gpu_available = check_gpu_support() if USE_LLM else False

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"),
        types.KeyboardButton("üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    )
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª, –∑–∞—Ç–µ–º –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å.", reply_markup=markup)

@bot.message_handler(content_types=['text', 'document'])
def handle_message(message):
    global all_texts, text_chunks, faiss_index

    if message.document:
        file_info = bot.get_file(message.document.file_id)
        file_bytes = bot.download_file(file_info.file_path)
        name = message.document.file_name.lower()

        if name.endswith(".txt"):
            text = extract_text_from_txt(file_bytes)
        elif name.endswith(".pdf"):
            text = extract_text_from_pdf(file_bytes)
        elif name.endswith(".docx"):
            text = extract_text_from_docx(file_bytes)
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ TXT, PDF, DOCX")
            return

        all_texts.append(text)
        faiss_index = None  # –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–∞—Ö
        bot.send_message(message.chat.id, f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {name}, —Å–ª–æ–≤: {len(text.split())}")

    elif message.text == "üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        bot.send_message(message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
        bot.register_next_step_handler(message, process_query)

    elif message.text:
        # —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –≤–æ–ø—Ä–æ—Å
        process_query(message)

def process_query(message):
    global faiss_index, text_chunks
    query = message.text
    saved_requests.append(query)

    if not all_texts:
        bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        return

    if faiss_index is None:
        bot.send_message(message.chat.id, "‚è≥ –°—Ç—Ä–æ–∏–º –∏–Ω–¥–µ–∫—Å...")
        text_chunks.clear()
        for doc in all_texts:
            text_chunks.extend(split_into_chunks(doc))
        embeddings = embed_chunks(text_chunks)
        #faiss_index = create_faiss_index(embeddings)

    bot.send_message(message.chat.id, "üîç –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã...")
    relevant = True #find_relevant_chunks(query, faiss_index, text_chunks)

    if not relevant:
        bot.send_message(message.chat.id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
        return

    context = "\n\n".join(relevant)

    if USE_LLM:
        bot.send_message(message.chat.id, "üß† –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é LLM...")
        answer = generate_response(query, context, gpu_available)
    else:
        answer = f"üìö –ù–∞–π–¥–µ–Ω–æ {len(relevant)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤:\n\n{context}"

    for i in range(0, len(answer), 4000):
        bot.send_message(message.chat.id, answer[i:i+4000])

bot.polling(none_stop=True)
